{
  "id": "../../../node_modules/react-redux/es/hooks/useSelector.js",
  "dependencies": [
    {
      "name": "/home/ashik/tuts-project/devConnector/packages/dashboard/package.json",
      "includedInParent": true,
      "mtime": 1600687904360
    },
    {
      "name": "/home/ashik/tuts-project/devConnector/packages/dashboard/.babelrc",
      "includedInParent": true,
      "mtime": 1600687536415
    },
    {
      "name": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/package.json",
      "includedInParent": true,
      "mtime": 1599222601107
    },
    {
      "name": "react",
      "loc": { "line": 1, "column": 71 },
      "parent": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/hooks/useSelector.js",
      "resolved": "/home/ashik/tuts-project/devConnector/node_modules/react/index.js"
    },
    {
      "name": "./useReduxContext",
      "loc": { "line": 2, "column": 58 },
      "parent": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/hooks/useSelector.js",
      "resolved": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/hooks/useReduxContext.js"
    },
    {
      "name": "../utils/Subscription",
      "loc": { "line": 3, "column": 25 },
      "parent": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/hooks/useSelector.js",
      "resolved": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/utils/Subscription.js"
    },
    {
      "name": "../utils/useIsomorphicLayoutEffect",
      "loc": { "line": 4, "column": 42 },
      "parent": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/hooks/useSelector.js",
      "resolved": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js"
    },
    {
      "name": "../components/Context",
      "loc": { "line": 5, "column": 34 },
      "parent": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/hooks/useSelector.js",
      "resolved": "/home/ashik/tuts-project/devConnector/node_modules/react-redux/es/components/Context.js"
    }
  ],
  "generated": {
    "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSelectorHook = createSelectorHook;\nexports.useSelector = void 0;\n\nvar _react = require(\"react\");\n\nvar _useReduxContext2 = require(\"./useReduxContext\");\n\nvar _Subscription = _interopRequireDefault(require(\"../utils/Subscription\"));\n\nvar _useIsomorphicLayoutEffect = require(\"../utils/useIsomorphicLayoutEffect\");\n\nvar _Context = require(\"../components/Context\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = (0, _react.useReducer)(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = (0, _react.useMemo)(function () {\n    return new _Subscription.default(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = (0, _react.useRef)();\n  var latestSelector = (0, _react.useRef)();\n  var latestStoreState = (0, _react.useRef)();\n  var latestSelectedState = (0, _react.useRef)();\n  var storeState = store.getState();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(storeState);\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {\n    latestSelector.current = selector;\n    latestStoreState.current = storeState;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nfunction createSelectorHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {\n    return (0, _react.useContext)(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (\"development\" !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelector\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n    (0, _react.useDebugValue)(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\n\nvar useSelector = /*#__PURE__*/createSelectorHook();\nexports.useSelector = useSelector;"
  },
  "sourceMaps": null,
  "error": null,
  "hash": "22fd6232d843d59f19a2feb7fdfc8d83",
  "cacheData": { "env": { "NODE_ENV": "development" } }
}
